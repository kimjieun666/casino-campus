package game.components.hand;

/**
 * 포커 핸드의 순위를 나타내는 열거형
 * 
 * 이 열거형은 포커 게임에서 사용되는 모든 핸드 순위를 정의합니다.
 * 각 핸드 순위는 고유한 점수를 가지며, 높은 점수일수록 강한 핸드입니다.
 * 
 * <p>구현 요구사항:</p>
 * <ul>
 *   <li>각 핸드는 고유한 점수를 가져야 합니다</li>
 *   <li>점수는 핸드의 강도를 나타내야 합니다 (높을수록 강함)</li>
 *   <li>각 핸드는 한국어 표시 이름을 가져야 합니다</li>
 *   <li>toString()은 이름과 점수를 함께 표시해야 합니다</li>
 * </ul>
 * 
 * <p>포커 핸드 순위 (약한 순서대로):</p>
 * <ol>
 *   <li>하이카드 (100점) - 아무런 조합이 없는 경우</li>
 *   <li>원페어 (200점) - 같은 숫자 2장</li>
 *   <li>투페어 (300점) - 같은 숫자 2장씩 2쌍</li>
 *   <li>쓰리카드 (400점) - 같은 숫자 3장</li>
 *   <li>스트레이트 (500점) - 연속된 숫자 5장</li>
 *   <li>플러시 (600점) - 같은 무늬 5장</li>
 *   <li>풀하우스 (700점) - 쓰리카드 + 원페어</li>
 *   <li>포카드 (800점) - 같은 숫자 4장</li>
 *   <li>스트레이트 플러시 (900점) - 같은 무늬의 연속된 숫자 5장</li>
 *   <li>로열 플러시 (1000점) - 10, J, Q, K, A의 스트레이트 플러시</li>
 * </ol>
 * 
 * <p>사용 예시:</p>
 * <pre>
 * HandRank rank = HandRank.FULL_HOUSE;
 * System.out.println(rank.getScore());      // 700 출력
 * System.out.println(rank.getDisplayName()); // "풀하우스" 출력
 * System.out.println(rank);                  // "풀하우스(700)" 출력
 * </pre>
 * 
 * @author XIYO
 * @version 1.0
 * @since 2024-01-01
 */
public enum HandRank {
    /**
     * 하이카드 - 아무런 조합이 없는 경우
     * 
     * <p>가장 높은 카드로 승부하는 가장 약한 핸드입니다.</p>
     * <p>예시: A♠ K♥ Q♦ J♣ 9♠</p>
     */
    HIGH_CARD(100, "하이카드"),
    
    /**
     * 원페어 - 같은 숫자 2장
     * 
     * <p>같은 랭크의 카드 2장을 포함하는 핸드입니다.</p>
     * <p>예시: A♠ A♥ K♦ Q♣ J♠</p>
     */
    ONE_PAIR(200, "원페어"),
    
    /**
     * 투페어 - 같은 숫자 2장씩 2쌍
     * 
     * <p>서로 다른 랭크의 페어 2개를 포함하는 핸드입니다.</p>
     * <p>예시: K♠ K♥ Q♦ Q♣ J♠</p>
     */
    TWO_PAIR(300, "투페어"),
    
    /**
     * 쓰리카드 - 같은 숫자 3장
     * 
     * <p>같은 랭크의 카드 3장을 포함하는 핸드입니다.</p>
     * <p>예시: 7♠ 7♥ 7♦ K♣ Q♠</p>
     */
    THREE_OF_A_KIND(400, "쓰리카드"),
    
    /**
     * 스트레이트 - 연속된 숫자 5장
     * 
     * <p>연속된 랭크의 카드 5장을 포함하는 핸드입니다.</p>
     * <p>예시: 5♠ 6♥ 7♦ 8♣ 9♠</p>
     * <p>특수 케이스: A-2-3-4-5 (백스트레이트)도 스트레이트로 인정</p>
     */
    STRAIGHT(500, "스트레이트"),
    
    /**
     * 플러시 - 같은 무늬 5장
     * 
     * <p>같은 무늬의 카드 5장을 포함하는 핸드입니다.</p>
     * <p>예시: A♦ K♦ Q♦ J♦ 9♦</p>
     */
    FLUSH(600, "플러시"),
    
    /**
     * 풀하우스 - 쓰리카드 + 원페어
     * 
     * <p>같은 랭크의 카드 3장과 다른 랭크의 카드 2장을 포함하는 핸드입니다.</p>
     * <p>예시: K♠ K♥ K♦ Q♣ Q♠</p>
     */
    FULL_HOUSE(700, "풀하우스"),
    
    /**
     * 포카드 - 같은 숫자 4장
     * 
     * <p>같은 랭크의 카드 4장을 포함하는 핸드입니다.</p>
     * <p>예시: 9♠ 9♥ 9♦ 9♣ K♠</p>
     */
    FOUR_OF_A_KIND(800, "포카드"),
    
    /**
     * 스트레이트 플러시 - 같은 무늬의 연속된 숫자 5장
     * 
     * <p>같은 무늬로 이루어진 연속된 랭크의 카드 5장을 포함하는 핸드입니다.</p>
     * <p>예시: 5♥ 6♥ 7♥ 8♥ 9♥</p>
     */
    STRAIGHT_FLUSH(900, "스트레이트 플러시"),
    
    /**
     * 로열 플러시 - 10, J, Q, K, A의 스트레이트 플러시
     * 
     * <p>같은 무늬의 10, J, Q, K, A로 이루어진 가장 강한 핸드입니다.</p>
     * <p>예시: 10♠ J♠ Q♠ K♠ A♠</p>
     */
    ROYAL_FLUSH(1000, "로열 플러시");
    
    private final int score;
    private final String displayName;
    
    /**
     * HandRank 생성자
     * 
     * <p>핸드 순위를 생성합니다. 각 순위는 고유한 점수와 표시 이름을 가집니다.</p>
     * 
     * @param score 핸드의 점수 (100-1000)
     * @param displayName 한국어 표시 이름
     */
    HandRank(int score, String displayName) {
        this.score = score;
        this.displayName = displayName;
    }
    
    /**
     * 핸드의 점수를 반환합니다.
     * 
     * <p>점수는 핸드의 강도를 나타내며, 높을수록 강한 핸드입니다.</p>
     * <ul>
     *   <li>하이카드: 100</li>
     *   <li>원페어: 200</li>
     *   <li>투페어: 300</li>
     *   <li>쓰리카드: 400</li>
     *   <li>스트레이트: 500</li>
     *   <li>플러시: 600</li>
     *   <li>풀하우스: 700</li>
     *   <li>포카드: 800</li>
     *   <li>스트레이트 플러시: 900</li>
     *   <li>로열 플러시: 1000</li>
     * </ul>
     * 
     * @return 핸드의 점수 (100-1000)
     */
    public int getScore() {
        return score;
    }
    
    /**
     * 핸드의 이름을 반환합니다.
     * 
     * <p>사용자에게 표시되는 한국어 이름을 반환합니다.</p>
     * 
     * @return 핸드의 한국어 이름
     */
    public String getDisplayName() {
        return displayName;
    }
    
    /**
     * 핸드의 문자열 표현을 반환합니다.
     * 
     * <p>표현 형식: "핸드이름(점수)"</p>
     * <p>예시: "풀하우스(700)", "로열 플러시(1000)"</p>
     * 
     * @return 핸드 이름과 점수를 포함한 문자열
     */
    @Override
    public String toString() {
        return displayName + "(" + score + ")";
    }
}